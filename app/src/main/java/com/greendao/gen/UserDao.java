package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhang.chat.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property M_id = new Property(0, long.class, "m_id", true, "_id");
        public final static Property Uu_id = new Property(1, long.class, "uu_id", false, "UU_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property User_sex = new Property(3, int.class, "user_sex", false, "USER_SEX");
        public final static Property User_real_name = new Property(4, String.class, "user_real_name", false, "USER_REAL_NAME");
        public final static Property User_password = new Property(5, String.class, "user_password", false, "USER_PASSWORD");
        public final static Property User_desc = new Property(6, String.class, "user_desc", false, "USER_DESC");
        public final static Property User_phone = new Property(7, String.class, "user_phone", false, "USER_PHONE");
        public final static Property User_account = new Property(8, String.class, "user_account", false, "USER_ACCOUNT");
        public final static Property User_email = new Property(9, String.class, "user_email", false, "USER_EMAIL");
        public final static Property User_img_face_path = new Property(10, String.class, "user_img_face_path", false, "USER_IMG_FACE_PATH");
        public final static Property User_register_date = new Property(11, long.class, "user_register_date", false, "USER_REGISTER_DATE");
        public final static Property U_NationID = new Property(12, String.class, "u_NationID", false, "U__NATION_ID");
        public final static Property U_Province = new Property(13, String.class, "U_Province", false, "U__PROVINCE");
        public final static Property U_City = new Property(14, String.class, "U_City", false, "U__CITY");
        public final static Property U_FriendshipPolicy = new Property(15, int.class, "U_FriendshipPolicy", false, "U__FRIENDSHIP_POLICY");
        public final static Property U_UserState = new Property(16, int.class, "U_UserState", false, "U__USER_STATE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: m_id
                "\"UU_ID\" INTEGER NOT NULL ," + // 1: uu_id
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"USER_SEX\" INTEGER NOT NULL ," + // 3: user_sex
                "\"USER_REAL_NAME\" TEXT," + // 4: user_real_name
                "\"USER_PASSWORD\" TEXT," + // 5: user_password
                "\"USER_DESC\" TEXT," + // 6: user_desc
                "\"USER_PHONE\" TEXT," + // 7: user_phone
                "\"USER_ACCOUNT\" TEXT," + // 8: user_account
                "\"USER_EMAIL\" TEXT," + // 9: user_email
                "\"USER_IMG_FACE_PATH\" TEXT," + // 10: user_img_face_path
                "\"USER_REGISTER_DATE\" INTEGER NOT NULL ," + // 11: user_register_date
                "\"U__NATION_ID\" TEXT," + // 12: u_NationID
                "\"U__PROVINCE\" TEXT," + // 13: U_Province
                "\"U__CITY\" TEXT," + // 14: U_City
                "\"U__FRIENDSHIP_POLICY\" INTEGER NOT NULL ," + // 15: U_FriendshipPolicy
                "\"U__USER_STATE\" INTEGER NOT NULL );"); // 16: U_UserState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getM_id());
        stmt.bindLong(2, entity.getUu_id());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
        stmt.bindLong(4, entity.getUser_sex());
 
        String user_real_name = entity.getUser_real_name();
        if (user_real_name != null) {
            stmt.bindString(5, user_real_name);
        }
 
        String user_password = entity.getUser_password();
        if (user_password != null) {
            stmt.bindString(6, user_password);
        }
 
        String user_desc = entity.getUser_desc();
        if (user_desc != null) {
            stmt.bindString(7, user_desc);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(8, user_phone);
        }
 
        String user_account = entity.getUser_account();
        if (user_account != null) {
            stmt.bindString(9, user_account);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(10, user_email);
        }
 
        String user_img_face_path = entity.getUser_img_face_path();
        if (user_img_face_path != null) {
            stmt.bindString(11, user_img_face_path);
        }
        stmt.bindLong(12, entity.getUser_register_date());
 
        String u_NationID = entity.getU_NationID();
        if (u_NationID != null) {
            stmt.bindString(13, u_NationID);
        }
 
        String U_Province = entity.getU_Province();
        if (U_Province != null) {
            stmt.bindString(14, U_Province);
        }
 
        String U_City = entity.getU_City();
        if (U_City != null) {
            stmt.bindString(15, U_City);
        }
        stmt.bindLong(16, entity.getU_FriendshipPolicy());
        stmt.bindLong(17, entity.getU_UserState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getM_id());
        stmt.bindLong(2, entity.getUu_id());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
        stmt.bindLong(4, entity.getUser_sex());
 
        String user_real_name = entity.getUser_real_name();
        if (user_real_name != null) {
            stmt.bindString(5, user_real_name);
        }
 
        String user_password = entity.getUser_password();
        if (user_password != null) {
            stmt.bindString(6, user_password);
        }
 
        String user_desc = entity.getUser_desc();
        if (user_desc != null) {
            stmt.bindString(7, user_desc);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(8, user_phone);
        }
 
        String user_account = entity.getUser_account();
        if (user_account != null) {
            stmt.bindString(9, user_account);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(10, user_email);
        }
 
        String user_img_face_path = entity.getUser_img_face_path();
        if (user_img_face_path != null) {
            stmt.bindString(11, user_img_face_path);
        }
        stmt.bindLong(12, entity.getUser_register_date());
 
        String u_NationID = entity.getU_NationID();
        if (u_NationID != null) {
            stmt.bindString(13, u_NationID);
        }
 
        String U_Province = entity.getU_Province();
        if (U_Province != null) {
            stmt.bindString(14, U_Province);
        }
 
        String U_City = entity.getU_City();
        if (U_City != null) {
            stmt.bindString(15, U_City);
        }
        stmt.bindLong(16, entity.getU_FriendshipPolicy());
        stmt.bindLong(17, entity.getU_UserState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // m_id
            cursor.getLong(offset + 1), // uu_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.getInt(offset + 3), // user_sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_real_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_password
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_desc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // user_account
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // user_img_face_path
            cursor.getLong(offset + 11), // user_register_date
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // u_NationID
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // U_Province
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // U_City
            cursor.getInt(offset + 15), // U_FriendshipPolicy
            cursor.getInt(offset + 16) // U_UserState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setM_id(cursor.getLong(offset + 0));
        entity.setUu_id(cursor.getLong(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_sex(cursor.getInt(offset + 3));
        entity.setUser_real_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_password(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_desc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_phone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_account(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_email(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser_img_face_path(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_register_date(cursor.getLong(offset + 11));
        entity.setU_NationID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setU_Province(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setU_City(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setU_FriendshipPolicy(cursor.getInt(offset + 15));
        entity.setU_UserState(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setM_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getM_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
