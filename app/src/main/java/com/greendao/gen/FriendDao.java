package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhang.chat.bean.Friend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property F_id = new Property(0, long.class, "f_id", true, "_id");
        public final static Property User_id = new Property(1, long.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property User_sex = new Property(3, int.class, "user_sex", false, "USER_SEX");
        public final static Property User_desc = new Property(4, String.class, "user_desc", false, "USER_DESC");
        public final static Property User_phone = new Property(5, String.class, "user_phone", false, "USER_PHONE");
        public final static Property User_account = new Property(6, String.class, "user_account", false, "USER_ACCOUNT");
        public final static Property User_img_face_path = new Property(7, String.class, "user_img_face_path", false, "USER_IMG_FACE_PATH");
        public final static Property F_friend_type_id = new Property(8, String.class, "f_friend_type_id", false, "F_FRIEND_TYPE_ID");
        public final static Property F_friend_groups_id = new Property(9, int.class, "f_friend_groups_id", false, "F_FRIEND_GROUPS_ID");
    }


    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: f_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: user_id
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"USER_SEX\" INTEGER NOT NULL ," + // 3: user_sex
                "\"USER_DESC\" TEXT," + // 4: user_desc
                "\"USER_PHONE\" TEXT," + // 5: user_phone
                "\"USER_ACCOUNT\" TEXT," + // 6: user_account
                "\"USER_IMG_FACE_PATH\" TEXT," + // 7: user_img_face_path
                "\"F_FRIEND_TYPE_ID\" TEXT," + // 8: f_friend_type_id
                "\"F_FRIEND_GROUPS_ID\" INTEGER NOT NULL );"); // 9: f_friend_groups_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Friend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getF_id());
        stmt.bindLong(2, entity.getUser_id());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
        stmt.bindLong(4, entity.getUser_sex());
 
        String user_desc = entity.getUser_desc();
        if (user_desc != null) {
            stmt.bindString(5, user_desc);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(6, user_phone);
        }
 
        String user_account = entity.getUser_account();
        if (user_account != null) {
            stmt.bindString(7, user_account);
        }
 
        String user_img_face_path = entity.getUser_img_face_path();
        if (user_img_face_path != null) {
            stmt.bindString(8, user_img_face_path);
        }
 
        String f_friend_type_id = entity.getF_friend_type_id();
        if (f_friend_type_id != null) {
            stmt.bindString(9, f_friend_type_id);
        }
        stmt.bindLong(10, entity.getF_friend_groups_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getF_id());
        stmt.bindLong(2, entity.getUser_id());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
        stmt.bindLong(4, entity.getUser_sex());
 
        String user_desc = entity.getUser_desc();
        if (user_desc != null) {
            stmt.bindString(5, user_desc);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(6, user_phone);
        }
 
        String user_account = entity.getUser_account();
        if (user_account != null) {
            stmt.bindString(7, user_account);
        }
 
        String user_img_face_path = entity.getUser_img_face_path();
        if (user_img_face_path != null) {
            stmt.bindString(8, user_img_face_path);
        }
 
        String f_friend_type_id = entity.getF_friend_type_id();
        if (f_friend_type_id != null) {
            stmt.bindString(9, f_friend_type_id);
        }
        stmt.bindLong(10, entity.getF_friend_groups_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.getLong(offset + 0), // f_id
            cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.getInt(offset + 3), // user_sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_account
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_img_face_path
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // f_friend_type_id
            cursor.getInt(offset + 9) // f_friend_groups_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setF_id(cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getLong(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_sex(cursor.getInt(offset + 3));
        entity.setUser_desc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_phone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_account(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_img_face_path(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setF_friend_type_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setF_friend_groups_id(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.setF_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Friend entity) {
        if(entity != null) {
            return entity.getF_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Friend entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
