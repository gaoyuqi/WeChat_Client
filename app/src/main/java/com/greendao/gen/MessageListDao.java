package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhang.chat.bean.chat.MessageList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_LIST".
*/
public class MessageListDao extends AbstractDao<MessageList, Long> {

    public static final String TABLENAME = "MESSAGE_LIST";

    /**
     * Properties of entity MessageList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property M_ID = new Property(0, Long.class, "M_ID", true, "_id");
        public final static Property M_PostMessages = new Property(1, String.class, "M_PostMessages", false, "M__POST_MESSAGES");
        public final static Property M_status = new Property(2, int.class, "M_status", false, "M_STATUS");
        public final static Property M_Time = new Property(3, String.class, "M_Time", false, "M__TIME");
        public final static Property M_MessagesTypeID = new Property(4, int.class, "M_MessagesTypeID", false, "M__MESSAGES_TYPE_ID");
        public final static Property M_ToUserID = new Property(5, long.class, "M_ToUserID", false, "M__TO_USER_ID");
        public final static Property M_FromUserID = new Property(6, long.class, "M_FromUserID", false, "M__FROM_USER_ID");
        public final static Property NewNumber = new Property(7, int.class, "newNumber", false, "NEW_NUMBER");
        public final static Property KeyFlag = new Property(8, String.class, "keyFlag", false, "KEY_FLAG");
    }


    public MessageListDao(DaoConfig config) {
        super(config);
    }
    
    public MessageListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: M_ID
                "\"M__POST_MESSAGES\" TEXT," + // 1: M_PostMessages
                "\"M_STATUS\" INTEGER NOT NULL ," + // 2: M_status
                "\"M__TIME\" TEXT," + // 3: M_Time
                "\"M__MESSAGES_TYPE_ID\" INTEGER NOT NULL ," + // 4: M_MessagesTypeID
                "\"M__TO_USER_ID\" INTEGER NOT NULL ," + // 5: M_ToUserID
                "\"M__FROM_USER_ID\" INTEGER NOT NULL ," + // 6: M_FromUserID
                "\"NEW_NUMBER\" INTEGER NOT NULL ," + // 7: newNumber
                "\"KEY_FLAG\" TEXT);"); // 8: keyFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageList entity) {
        stmt.clearBindings();
 
        Long M_ID = entity.getM_ID();
        if (M_ID != null) {
            stmt.bindLong(1, M_ID);
        }
 
        String M_PostMessages = entity.getM_PostMessages();
        if (M_PostMessages != null) {
            stmt.bindString(2, M_PostMessages);
        }
        stmt.bindLong(3, entity.getM_status());
 
        String M_Time = entity.getM_Time();
        if (M_Time != null) {
            stmt.bindString(4, M_Time);
        }
        stmt.bindLong(5, entity.getM_MessagesTypeID());
        stmt.bindLong(6, entity.getM_ToUserID());
        stmt.bindLong(7, entity.getM_FromUserID());
        stmt.bindLong(8, entity.getNewNumber());
 
        String keyFlag = entity.getKeyFlag();
        if (keyFlag != null) {
            stmt.bindString(9, keyFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageList entity) {
        stmt.clearBindings();
 
        Long M_ID = entity.getM_ID();
        if (M_ID != null) {
            stmt.bindLong(1, M_ID);
        }
 
        String M_PostMessages = entity.getM_PostMessages();
        if (M_PostMessages != null) {
            stmt.bindString(2, M_PostMessages);
        }
        stmt.bindLong(3, entity.getM_status());
 
        String M_Time = entity.getM_Time();
        if (M_Time != null) {
            stmt.bindString(4, M_Time);
        }
        stmt.bindLong(5, entity.getM_MessagesTypeID());
        stmt.bindLong(6, entity.getM_ToUserID());
        stmt.bindLong(7, entity.getM_FromUserID());
        stmt.bindLong(8, entity.getNewNumber());
 
        String keyFlag = entity.getKeyFlag();
        if (keyFlag != null) {
            stmt.bindString(9, keyFlag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageList readEntity(Cursor cursor, int offset) {
        MessageList entity = new MessageList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // M_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // M_PostMessages
            cursor.getInt(offset + 2), // M_status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // M_Time
            cursor.getInt(offset + 4), // M_MessagesTypeID
            cursor.getLong(offset + 5), // M_ToUserID
            cursor.getLong(offset + 6), // M_FromUserID
            cursor.getInt(offset + 7), // newNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // keyFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageList entity, int offset) {
        entity.setM_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setM_PostMessages(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setM_status(cursor.getInt(offset + 2));
        entity.setM_Time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setM_MessagesTypeID(cursor.getInt(offset + 4));
        entity.setM_ToUserID(cursor.getLong(offset + 5));
        entity.setM_FromUserID(cursor.getLong(offset + 6));
        entity.setNewNumber(cursor.getInt(offset + 7));
        entity.setKeyFlag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageList entity, long rowId) {
        entity.setM_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageList entity) {
        if(entity != null) {
            return entity.getM_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageList entity) {
        return entity.getM_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
